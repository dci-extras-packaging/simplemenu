--- simplemenu-1.0.12.orig/package/contents/ui/ItemGridDelegate.qml
+++ simplemenu-1.0.12/package/contents/ui/ItemGridDelegate.qml
@@ -29,8 +29,8 @@ import "../code/tools.js" as Tools
 Item {
     id: item
 
-    implicitWidth: GridView.view.cellWidth
-    implicitHeight: GridView.view.cellHeight
+    width: GridView.view.cellWidth
+    height: width
 
     property bool showLabel: true
 
--- simplemenu-1.0.12.orig/package/contents/ui/ItemGridView.qml
+++ simplemenu-1.0.12/package/contents/ui/ItemGridView.qml
@@ -52,9 +52,6 @@ FocusScope {
     property alias horizontalScrollBarPolicy: scrollArea.horizontalScrollBarPolicy
     property alias verticalScrollBarPolicy: scrollArea.verticalScrollBarPolicy
 
-    implicitWidth: gridView.contentWidth
-    implicitHeight: gridView.contentHeight
-
     onFocusChanged: {
         if (!focus) {
             currentIndex = -1;
--- simplemenu-1.0.12.orig/package/contents/ui/MenuRepresentation.qml
+++ simplemenu-1.0.12/package/contents/ui/MenuRepresentation.qml
@@ -20,7 +20,6 @@
 
 import QtQuick 2.4
 import QtQuick.Layouts 1.1
-import QtQuick.Controls 2.12 as QQC2
 import org.kde.plasma.plasmoid 2.0
 import org.kde.plasma.core 2.0 as PlasmaCore
 import org.kde.plasma.components 2.0 as PlasmaComponents
@@ -170,606 +169,596 @@ PlasmaCore.Dialog {
         }
     }
 
-    ColumnLayout {
-        anchors.fill: parent
+    PlasmaComponents3.TextField {
+        id: searchField
 
-        PlasmaExtras.PlasmoidHeading {
-            leftPadding: 0
-            rightPadding: 0
-
-            contentItem: RowLayout {
-                PlasmaComponents3.TextField {
-                    id: searchField
-
-                    Layout.fillWidth: true
-
-                    placeholderText: i18n("Search...")
-
-                    onTextChanged: {
-                        runnerModel.query = text;
-                    }
-
-                    Keys.onPressed: {
-                        if (event.key == Qt.Key_Down) {
-                            event.accepted = true;
-                            pageList.currentItem.itemGrid.tryActivate(0, 0);
-                        } else if (event.key == Qt.Key_Right) {
-                            if (cursorPosition == length) {
-                                event.accepted = true;
-
-                                if (pageList.currentItem.itemGrid.currentIndex == -1) {
-                                    pageList.currentItem.itemGrid.tryActivate(0, 0);
-                                } else {
-                                    pageList.currentItem.itemGrid.tryActivate(0, 1);
-                                }
-                            }
-                        } else if (event.key == Qt.Key_Return || event.key == Qt.Key_Enter) {
-                            if (text != "" && pageList.currentItem.itemGrid.count > 0) {
-                                event.accepted = true;
-                                pageList.currentItem.itemGrid.tryActivate(0, 0);
-                                pageList.currentItem.itemGrid.model.trigger(0, "", null);
-                                root.visible = false;
-                            }
-                        } else if (event.key == Qt.Key_Tab) {
-                            event.accepted = true;
-                            systemFavoritesGrid.tryActivate(0, 0);
-                        } else if (event.key == Qt.Key_Backtab) {
-                            event.accepted = true;
-
-                            if (!searching) {
-                                filterList.forceActiveFocus();
-                            } else {
-                                systemFavoritesGrid.tryActivate(0, 0);
-                            }
-                        }
-                    }
+        anchors.top: parent.top
+        anchors.left: parent.left
+        anchors.right: systemFavoritesGrid.left
+        anchors.rightMargin: units.smallSpacing
 
-                    function backspace() {
-                        if (!root.visible) {
-                            return;
-                        }
+        width: parent.width
 
-                        focus = true;
-                        text = text.slice(0, -1);
-                    }
+        placeholderText: i18n("Search...")
 
-                    function appendText(newText) {
-                        if (!root.visible) {
-                            return;
-                        }
+        onTextChanged: {
+            runnerModel.query = text;
+        }
 
-                        focus = true;
-                        text = text + newText;
+        Keys.onPressed: {
+            if (event.key == Qt.Key_Down) {
+                event.accepted = true;
+                pageList.currentItem.itemGrid.tryActivate(0, 0);
+            } else if (event.key == Qt.Key_Right) {
+                if (cursorPosition == length) {
+                    event.accepted = true;
+
+                    if (pageList.currentItem.itemGrid.currentIndex == -1) {
+                        pageList.currentItem.itemGrid.tryActivate(0, 0);
+                    } else {
+                        pageList.currentItem.itemGrid.tryActivate(0, 1);
                     }
                 }
-
-                QQC2.ToolSeparator {
-                    Layout.fillHeight: true
+            } else if (event.key == Qt.Key_Return || event.key == Qt.Key_Enter) {
+                if (text != "" && pageList.currentItem.itemGrid.count > 0) {
+                    event.accepted = true;
+                    pageList.currentItem.itemGrid.tryActivate(0, 0);
+                    pageList.currentItem.itemGrid.model.trigger(0, "", null);
+                    root.visible = false;
+                }
+            } else if (event.key == Qt.Key_Tab) {
+                event.accepted = true;
+                systemFavoritesGrid.tryActivate(0, 0);
+            } else if (event.key == Qt.Key_Backtab) {
+                event.accepted = true;
+
+                if (!searching) {
+                    filterList.forceActiveFocus();
+                } else {
+                    systemFavoritesGrid.tryActivate(0, 0);
                 }
+            }
+        }
 
-                Item {
-                    implicitWidth: plasmoid.configuration.showFilterList ? filterListScrollArea.Layout.preferredWidth : systemFavoritesGrid.cellWidth * 4
-                    implicitHeight: systemFavoritesGrid.cellHeight
+        function backspace() {
+            if (!root.visible) {
+                return;
+            }
 
-                    ItemGridView {
-                        id: systemFavoritesGrid
+            focus = true;
+            text = text.slice(0, -1);
+        }
 
-                        anchors.horizontalCenter: parent.horizontalCenter
+        function appendText(newText) {
+            if (!root.visible) {
+                return;
+            }
 
-                        cellWidth: searchField.height
-                        cellHeight: searchField.height
-                        height: cellHeight
-                        width: cellWidth * count
+            focus = true;
+            text = text + newText;
+        }
+    }
 
-                        iconSize: height - units.smallSpacing
+    ItemGridView {
+        id: systemFavoritesGrid
 
-                        horizontalScrollBarPolicy: Qt.ScrollBarAlwaysOff
-                        verticalScrollBarPolicy: Qt.ScrollBarAlwaysOff
+        anchors {
+            top: parent.top
+            right: parent.right
+        }
 
-                        dragEnabled: true
-                        showLabels: false
+        width: cellWidth * 4
+        height: searchField.height
 
-                        model: systemFavorites
+        cellWidth: height
+        cellHeight: height
 
-                        onCurrentIndexChanged: {
-                            focus = true;
-                        }
+        iconSize: height - units.smallSpacing
 
-                        onKeyNavLeft: {
-                            currentIndex = -1;
-                            searchField.focus = true;
-                        }
+        horizontalScrollBarPolicy: Qt.ScrollBarAlwaysOff
+        verticalScrollBarPolicy: Qt.ScrollBarAlwaysOff
 
-                        onKeyNavDown: {
-                            pageListScrollArea.focus = true;
+        dragEnabled: true
+        showLabels: false
 
-                            if (pageList.currentItem) {
-                                pageList.currentItem.itemGrid.tryActivate(0, 0);
-                            }
-                        }
+        model: systemFavorites
 
-                        Keys.onPressed: {
-                            if (event.key == Qt.Key_Tab) {
-                                event.accepted = true;
-
-                                currentIndex = -1;
-
-                                if (!searching) {
-                                    filterList.forceActiveFocus();
-                                } else {
-                                    searchField.focus = true;
-                                }
-                            } else if (event.key == Qt.Key_Backtab) {
-                                event.accepted = true;
-                                currentIndex = -1;
-                                searchField.focus = true;
-                            }
-                        }
-                    }
+        onCurrentIndexChanged: {
+            focus = true;
+        }
+
+        onKeyNavLeft: {
+            currentIndex = -1;
+            searchField.focus = true;
+        }
+
+        onKeyNavDown: {
+            pageListScrollArea.focus = true;
+
+            if (pageList.currentItem) {
+                pageList.currentItem.itemGrid.tryActivate(0, 0);
+            }
+        }
+
+        Keys.onPressed: {
+            if (event.key == Qt.Key_Tab) {
+                event.accepted = true;
+
+                currentIndex = -1;
+
+                if (!searching) {
+                    filterList.forceActiveFocus();
+                } else {
+                    searchField.focus = true;
                 }
+            } else if (event.key == Qt.Key_Backtab) {
+                event.accepted = true;
+                currentIndex = -1;
+                searchField.focus = true;
             }
         }
+    }
 
-        RowLayout {
-            Layout.fillWidth: true
-            Layout.fillHeight: true
-
-            ColumnLayout {
-                Layout.fillWidth: true
-                Layout.fillHeight: true
+    PlasmaExtras.ScrollArea {
+        id: pageListScrollArea
 
-                PlasmaExtras.ScrollArea {
-                    id: pageListScrollArea
+        anchors {
+            left: parent.left
+            top: searchField.bottom
+            topMargin: units.smallSpacing
+            bottom: paginationBar.top
+            bottomMargin: units.smallSpacing
+        }
 
-                    Layout.fillWidth: true
-                    Layout.fillHeight: true
+        width: (cellSize * 6)
 
-                    focus: true
-                    frameVisible: false
+        focus: true
 
-                    horizontalScrollBarPolicy: Qt.ScrollBarAlwaysOff
-                    verticalScrollBarPolicy: Qt.ScrollBarAlwaysOff
+        horizontalScrollBarPolicy: Qt.ScrollBarAlwaysOff
+        verticalScrollBarPolicy: Qt.ScrollBarAlwaysOff
 
-                    ListView {
-                        id: pageList
+        ListView {
+            id: pageList
 
-                        anchors.fill: parent
+            anchors.fill: parent
 
-                        orientation: Qt.Horizontal
-                        snapMode: ListView.SnapOneItem
+            orientation: Qt.Horizontal
+            snapMode: ListView.SnapOneItem
 
-                        currentIndex: 0
+            currentIndex: 0
 
-                        model: rootModel.modelForRow(0)
+            model: rootModel.modelForRow(0)
 
-                        onCurrentIndexChanged: {
-                            positionViewAtIndex(currentIndex, ListView.Contain);
-                        }
+            onCurrentIndexChanged: {
+                positionViewAtIndex(currentIndex, ListView.Contain);
+            }
 
-                        onCurrentItemChanged: {
-                            if (!currentItem) {
-                                return;
-                            }
+            onCurrentItemChanged: {
+                if (!currentItem) {
+                    return;
+                }
+
+                currentItem.itemGrid.focus = true;
+            }
+
+            onModelChanged: {
+                currentIndex = 0;
+            }
+
+            onFlickingChanged: {
+                if (!flicking) {
+                    var pos = mapToItem(contentItem, root.width / 2, root.height / 2);
+                    var itemIndex = indexAt(pos.x, pos.y);
+                    currentIndex = itemIndex;
+                }
+            }
+
+            function cycle() {
+                enabled = false;
+                enabled = true;
+            }
+
+            function activateNextPrev(next) {
+                if (next) {
+                    var newIndex = pageList.currentIndex + 1;
+
+                    if (newIndex == pageList.count) {
+                        newIndex = 0;
+                    }
+
+                    pageList.currentIndex = newIndex;
+                } else {
+                    var newIndex = pageList.currentIndex - 1;
+
+                    if (newIndex < 0) {
+                        newIndex = (pageList.count - 1);
+                    }
+
+                    pageList.currentIndex = newIndex;
+                }
+            }
 
-                            currentItem.itemGrid.focus = true;
+            delegate: Item {
+                width: cellSize * 6
+                height: cellSize * 4
+
+                property Item itemGrid: gridView
+
+                ItemGridView {
+                    id: gridView
+
+                    anchors.fill: parent
+
+                    cellWidth: cellSize
+                    cellHeight: cellSize
+
+                    horizontalScrollBarPolicy: Qt.ScrollBarAlwaysOff
+                    verticalScrollBarPolicy: Qt.ScrollBarAlwaysOff
+
+                    dragEnabled: (index == 0)
+
+                    model: searching ? runnerModel.modelForRow(index) : rootModel.modelForRow(filterListScrollArea.visible ? filterList.currentIndex : 0).modelForRow(index)
+
+                    onCurrentIndexChanged: {
+                        if (currentIndex != -1 && !searching) {
+                            pageListScrollArea.focus = true;
+                            focus = true;
                         }
+                    }
 
-                        onModelChanged: {
+                    onCountChanged: {
+                        if (searching && index == 0) {
                             currentIndex = 0;
                         }
+                    }
 
-                        onFlickingChanged: {
-                            if (!flicking) {
-                                var pos = mapToItem(contentItem, root.width / 2, root.height / 2);
-                                var itemIndex = indexAt(pos.x, pos.y);
-                                currentIndex = itemIndex;
-                            }
+                    onKeyNavUp: {
+                        currentIndex = -1;
+                        searchField.focus = true;
+                    }
+
+                    onKeyNavRight: {
+                        var newIndex = pageList.currentIndex + 1;
+                        var cRow = currentRow();
+
+                        if (newIndex == pageList.count) {
+                            newIndex = 0;
                         }
 
-                        function cycle() {
-                            enabled = false;
-                            enabled = true;
+                        pageList.currentIndex = newIndex;
+                        pageList.currentItem.itemGrid.tryActivate(cRow, 0);
+                    }
+
+                    onKeyNavLeft: {
+                        var newIndex = pageList.currentIndex - 1;
+                        var cRow = currentRow();
+
+                        if (newIndex < 0) {
+                            newIndex = (pageList.count - 1);
                         }
 
-                        function activateNextPrev(next) {
-                            if (next) {
-                                var newIndex = pageList.currentIndex + 1;
-
-                                if (newIndex == pageList.count) {
-                                    newIndex = 0;
-                                }
-
-                                pageList.currentIndex = newIndex;
-                            } else {
-                                var newIndex = pageList.currentIndex - 1;
-
-                                if (newIndex < 0) {
-                                    newIndex = (pageList.count - 1);
-                                }
+                        pageList.currentIndex = newIndex;
+                        pageList.currentItem.itemGrid.tryActivate(cRow, 5);
+                    }
+                }
+
+                Kicker.WheelInterceptor {
+                    anchors.fill: parent
+                    z: 1
+
+                    property int wheelDelta: 0
+
+                    function scrollByWheel(wheelDelta, eventDelta) {
+                        // magic number 120 for common "one click"
+                        // See: http://qt-project.org/doc/qt-5/qml-qtquick-wheelevent.html#angleDelta-prop
+                        wheelDelta += eventDelta;
+
+                        var increment = 0;
+
+                        while (wheelDelta >= 120) {
+                            wheelDelta -= 120;
+                            increment++;
+                        }
 
-                                pageList.currentIndex = newIndex;
-                            }
+                        while (wheelDelta <= -120) {
+                            wheelDelta += 120;
+                            increment--;
                         }
 
-                        delegate: Item {
-                            width: cellSize * 6
-                            height: cellSize * 4
-
-                            property Item itemGrid: gridView
-
-                            ItemGridView {
-                                id: gridView
-
-                                anchors.horizontalCenter: parent.horizontalCenter
-                                width: cellSize * 6
-                                height: cellSize * 4
-
-                                cellWidth: cellSize
-                                cellHeight: cellSize
-
-                                horizontalScrollBarPolicy: Qt.ScrollBarAlwaysOff
-                                verticalScrollBarPolicy: Qt.ScrollBarAlwaysOff
-
-                                dragEnabled: (index == 0)
-
-                                model: searching ? runnerModel.modelForRow(index) : rootModel.modelForRow(filterListScrollArea.visible ? filterList.currentIndex : 0).modelForRow(index)
-
-                                onCurrentIndexChanged: {
-                                    if (currentIndex != -1 && !searching) {
-                                        pageListScrollArea.focus = true;
-                                        focus = true;
-                                    }
-                                }
-
-                                onCountChanged: {
-                                    if (searching && index == 0) {
-                                        currentIndex = 0;
-                                    }
-                                }
-
-                                onKeyNavUp: {
-                                    currentIndex = -1;
-                                    searchField.focus = true;
-                                }
-
-                                onKeyNavRight: {
-                                    var newIndex = pageList.currentIndex + 1;
-                                    var cRow = currentRow();
-
-                                    if (newIndex == pageList.count) {
-                                        newIndex = 0;
-                                    }
-
-                                    pageList.currentIndex = newIndex;
-                                    pageList.currentItem.itemGrid.tryActivate(cRow, 0);
-                                }
-
-                                onKeyNavLeft: {
-                                    var newIndex = pageList.currentIndex - 1;
-                                    var cRow = currentRow();
-
-                                    if (newIndex < 0) {
-                                        newIndex = (pageList.count - 1);
-                                    }
-
-                                    pageList.currentIndex = newIndex;
-                                    pageList.currentItem.itemGrid.tryActivate(cRow, 5);
-                                }
-                            }
-
-                            Kicker.WheelInterceptor {
-                                anchors.fill: parent
-                                z: 1
-
-                                property int wheelDelta: 0
-
-                                function scrollByWheel(wheelDelta, eventDelta) {
-                                    // magic number 120 for common "one click"
-                                    // See: http://qt-project.org/doc/qt-5/qml-qtquick-wheelevent.html#angleDelta-prop
-                                    wheelDelta += eventDelta;
-
-                                    var increment = 0;
-
-                                    while (wheelDelta >= 120) {
-                                        wheelDelta -= 120;
-                                        increment++;
-                                    }
-
-                                    while (wheelDelta <= -120) {
-                                        wheelDelta += 120;
-                                        increment--;
-                                    }
-
-                                    while (increment != 0) {
-                                        pageList.activateNextPrev(increment < 0);
-                                        increment += (increment < 0) ? 1 : -1;
-                                    }
-
-                                    return wheelDelta;
-                                }
-
-                                onWheelMoved: {
-                                    wheelDelta = scrollByWheel(wheelDelta, delta.y);
-                                }
-                            }
+                        while (increment != 0) {
+                            pageList.activateNextPrev(increment < 0);
+                            increment += (increment < 0) ? 1 : -1;
                         }
+
+                        return wheelDelta;
+                    }
+
+                    onWheelMoved: {
+                        wheelDelta = scrollByWheel(wheelDelta, delta.y);
                     }
                 }
+            }
+        }
+    }
 
-                ListView {
-                    id: paginationBar
+    ListView {
+        id: paginationBar
 
-                    Layout.alignment: Qt.AlignHCenter
+        anchors {
+            bottom: parent.bottom
+            horizontalCenter: parent.horizontalCenter
+        }
 
-                    width: model.count * units.iconSizes.small
-                    height: units.iconSizes.small
+        width: model.count * units.iconSizes.small
+        height: units.iconSizes.small
 
-                    orientation: Qt.Horizontal
+        orientation: Qt.Horizontal
 
-                    model: rootModel.modelForRow(0)
+        model: rootModel.modelForRow(0)
 
-                    delegate: Item {
-                        width: units.iconSizes.small
-                        height: width
+        delegate: Item {
+            width: units.iconSizes.small
+            height: width
 
-                        Rectangle {
-                            id: pageDelegate
+            Rectangle {
+                id: pageDelegate
 
-                            anchors {
-                                horizontalCenter: parent.horizontalCenter
-                                verticalCenter: parent.verticalCenter
-                            }
+                anchors {
+                    horizontalCenter: parent.horizontalCenter
+                    verticalCenter: parent.verticalCenter
+                }
 
-                            width: parent.width / 2
-                            height: width
+                width: parent.width / 2
+                height: width
 
-                            property bool isCurrent: (pageList.currentIndex == index)
+                property bool isCurrent: (pageList.currentIndex == index)
 
-                            radius: width / 2
+                radius: width / 2
 
-                            color: theme.textColor
-                            opacity: 0.5
+                color: theme.textColor
+                opacity: 0.5
 
-                            Behavior on width { SmoothedAnimation { duration: units.longDuration; velocity: 0.01 } }
-                            Behavior on opacity { SmoothedAnimation { duration: units.longDuration; velocity: 0.01 } }
+                Behavior on width { SmoothedAnimation { duration: units.longDuration; velocity: 0.01 } }
+                Behavior on opacity { SmoothedAnimation { duration: units.longDuration; velocity: 0.01 } }
 
-                            states: [
-                                State {
-                                    when: pageDelegate.isCurrent
-                                    PropertyChanges { target: pageDelegate; width: parent.width - (units.smallSpacing * 2) }
-                                    PropertyChanges { target: pageDelegate; opacity: 0.8 }
-                                }
-                            ]
-                        }
+                states: [
+                    State {
+                        when: pageDelegate.isCurrent
+                        PropertyChanges { target: pageDelegate; width: parent.width - (units.smallSpacing * 2) }
+                        PropertyChanges { target: pageDelegate; opacity: 0.8 }
+                    }
+                ]
+            }
 
-                        MouseArea {
-                            anchors.fill: parent
-                            onClicked: pageList.currentIndex = index;
-
-                            property int wheelDelta: 0
-
-                            function scrollByWheel(wheelDelta, eventDelta) {
-                                // magic number 120 for common "one click"
-                                // See: http://qt-project.org/doc/qt-5/qml-qtquick-wheelevent.html#angleDelta-prop
-                                wheelDelta += eventDelta;
-
-                                var increment = 0;
-
-                                while (wheelDelta >= 120) {
-                                    wheelDelta -= 120;
-                                    increment++;
-                                }
-
-                                while (wheelDelta <= -120) {
-                                    wheelDelta += 120;
-                                    increment--;
-                                }
-
-                                while (increment != 0) {
-                                    pageList.activateNextPrev(increment < 0);
-                                    increment += (increment < 0) ? 1 : -1;
-                                }
-
-                                return wheelDelta;
-                            }
-
-                            onWheel: {
-                                wheelDelta = scrollByWheel(wheelDelta, wheel.angleDelta.y);
-                            }
-                        }
+            MouseArea {
+                anchors.fill: parent
+                onClicked: pageList.currentIndex = index;
+
+                property int wheelDelta: 0
+
+                function scrollByWheel(wheelDelta, eventDelta) {
+                    // magic number 120 for common "one click"
+                    // See: http://qt-project.org/doc/qt-5/qml-qtquick-wheelevent.html#angleDelta-prop
+                    wheelDelta += eventDelta;
+
+                    var increment = 0;
+
+                    while (wheelDelta >= 120) {
+                        wheelDelta -= 120;
+                        increment++;
                     }
+
+                    while (wheelDelta <= -120) {
+                        wheelDelta += 120;
+                        increment--;
+                    }
+
+                    while (increment != 0) {
+                        pageList.activateNextPrev(increment < 0);
+                        increment += (increment < 0) ? 1 : -1;
+                    }
+
+                    return wheelDelta;
                 }
-            }
 
-            QQC2.ToolSeparator {
-                Layout.fillHeight: true
+                onWheel: {
+                    wheelDelta = scrollByWheel(wheelDelta, wheel.angleDelta.y);
+                }
             }
+        }
+    }
 
-            PlasmaExtras.ScrollArea {
-                id: filterListScrollArea
+    PlasmaExtras.ScrollArea {
+        id: filterListScrollArea
 
-                property int desiredWidth: 0
+        anchors {
+            left: pageListScrollArea.right
+            leftMargin: units.smallSpacing
+            top: searchField.bottom
+            topMargin: units.smallSpacing
+            bottom: paginationBar.top
+            bottomMargin: units.smallSpacing
+        }
 
-                Layout.fillHeight: true
-                Layout.preferredWidth: plasmoid.configuration.showFilterList ? desiredWidth : 0
+        property int desiredWidth: 0
 
-                enabled: !searching
-                visible: plasmoid.configuration.showFilterList
+        width: plasmoid.configuration.showFilterList ? desiredWidth : 0
 
-                property alias currentIndex: filterList.currentIndex
+        enabled: !searching
+        visible: plasmoid.configuration.showFilterList
 
-                opacity: root.visible ? (searching ? 0.30 : 1.0) : 0.3
+        property alias currentIndex: filterList.currentIndex
 
-                Behavior on opacity { SmoothedAnimation { duration: units.longDuration; velocity: 0.01 } }
+        opacity: root.visible ? (searching ? 0.30 : 1.0) : 0.3
 
-                verticalScrollBarPolicy: (opacity == 1.0) ? Qt.ScrollBarAsNeeded : Qt.ScrollBarAlwaysOff
+        Behavior on opacity { SmoothedAnimation { duration: units.longDuration; velocity: 0.01 } }
 
-                onEnabledChanged: {
-                    if (!enabled) {
-                        filterList.currentIndex = -1;
-                    }
-                }
+        verticalScrollBarPolicy: (opacity == 1.0) ? Qt.ScrollBarAsNeeded : Qt.ScrollBarAlwaysOff
 
-                ListView {
-                    id: filterList
+        onEnabledChanged: {
+            if (!enabled) {
+                filterList.currentIndex = -1;
+            }
+        }
 
-                    focus: true
+        ListView {
+            id: filterList
 
-                    property bool allApps: false
-                    property int eligibleWidth: width
-                    property int hItemMargins: highlightItemSvg.margins.left + highlightItemSvg.margins.right
-                    model: filterListScrollArea.visible ? rootModel : null
+            focus: true
 
-                    boundsBehavior: Flickable.StopAtBounds
-                    snapMode: ListView.SnapToItem
-                    spacing: 0
-                    keyNavigationWraps: true
+            property bool allApps: false
+            property int eligibleWidth: width
+            property int hItemMargins: highlightItemSvg.margins.left + highlightItemSvg.margins.right
+            model: filterListScrollArea.visible ? rootModel : null
 
-                    delegate: MouseArea {
-                        id: item
+            boundsBehavior: Flickable.StopAtBounds
+            snapMode: ListView.SnapToItem
+            spacing: 0
+            keyNavigationWraps: true
 
-                        property int textWidth: label.contentWidth
-                        property int mouseCol
+            delegate: MouseArea {
+                id: item
 
-                        width: parent.width
-                        height: label.paintedHeight + highlightItemSvg.margins.top + highlightItemSvg.margins.bottom
+                property int textWidth: label.contentWidth
+                property int mouseCol
 
-                        Accessible.role: Accessible.MenuItem
-                        Accessible.name: model.display
+                width: parent.width
+                height: label.paintedHeight + highlightItemSvg.margins.top + highlightItemSvg.margins.bottom
 
-                        acceptedButtons: Qt.LeftButton
+                Accessible.role: Accessible.MenuItem
+                Accessible.name: model.display
 
-                        hoverEnabled: true
+                acceptedButtons: Qt.LeftButton
 
-                        onContainsMouseChanged: {
-                            if (!containsMouse) {
-                                updateCurrentItemTimer.stop();
-                            }
-                        }
+                hoverEnabled: true
 
-                        onPressed: {
-                            if (!plasmoid.configuration.switchCategoriesOnHover) {
-                                ListView.view.currentIndex = index;
-                            }
-                        }
+                onContainsMouseChanged: {
+                    if (!containsMouse) {
+                        updateCurrentItemTimer.stop();
+                    }
+                }
 
-                        onPositionChanged: { // Lazy menu implementation.
-                            if (!plasmoid.configuration.switchCategoriesOnHover) {
-                                return;
-                            }
-
-                            mouseCol = mouse.x;
-
-                            if (index == ListView.view.currentIndex) {
-                                updateCurrentItem();
-                            } else if ((index == ListView.view.currentIndex - 1) && mouse.y < (item.height - 6)
-                                || (index == ListView.view.currentIndex + 1) && mouse.y > 5) {
-
-                                if (mouse.x > ListView.view.eligibleWidth - 5) {
-                                    updateCurrentItem();
-                                }
-                            } else if (mouse.x > ListView.view.eligibleWidth) {
-                                updateCurrentItem();
-                            }
+                onPressed: {
+                    if (!plasmoid.configuration.switchCategoriesOnHover) {
+                        ListView.view.currentIndex = index;
+                    }
+                }
 
-                            updateCurrentItemTimer.start();
-                        }
+                onPositionChanged: { // Lazy menu implementation.
+                    if (!plasmoid.configuration.switchCategoriesOnHover) {
+                        return;
+                    }
+
+                    mouseCol = mouse.x;
+
+                    if (index == ListView.view.currentIndex) {
+                        updateCurrentItem();
+                    } else if ((index == ListView.view.currentIndex - 1) && mouse.y < (item.height - 6)
+                        || (index == ListView.view.currentIndex + 1) && mouse.y > 5) {
 
-                        function updateCurrentItem() {
-                            ListView.view.currentIndex = index;
-                            ListView.view.eligibleWidth = Math.min(width, mouseCol);
+                        if (mouse.x > ListView.view.eligibleWidth - 5) {
+                            updateCurrentItem();
                         }
+                    } else if (mouse.x > ListView.view.eligibleWidth) {
+                        updateCurrentItem();
+                    }
 
-                        Timer {
-                            id: updateCurrentItemTimer
+                    updateCurrentItemTimer.start();
+                }
 
-                            interval: 50
-                            repeat: false
+                function updateCurrentItem() {
+                    ListView.view.currentIndex = index;
+                    ListView.view.eligibleWidth = Math.min(width, mouseCol);
+                }
 
-                            onTriggered: parent.updateCurrentItem()
-                        }
+                Timer {
+                    id: updateCurrentItemTimer
 
-                        PlasmaExtras.Heading {
-                            id: label
+                    interval: 50
+                    repeat: false
 
-                            anchors {
-                                fill: parent
-                                leftMargin: highlightItemSvg.margins.left
-                                rightMargin: highlightItemSvg.margins.right
-                            }
-
-                            elide: Text.ElideRight
-                            wrapMode: Text.NoWrap
-                            opacity: 1.0
+                    onTriggered: parent.updateCurrentItem()
+                }
 
-                            level: 5
+                PlasmaExtras.Heading {
+                    id: label
 
-                            text: model.display
-                        }
+                    anchors {
+                        fill: parent
+                        leftMargin: highlightItemSvg.margins.left
+                        rightMargin: highlightItemSvg.margins.right
                     }
 
-                    highlight: PlasmaComponents.Highlight {
-                        anchors {
-                            top: filterList.currentItem ? filterList.currentItem.top : undefined
-                            left: filterList.currentItem ? filterList.currentItem.left : undefined
-                            bottom: filterList.currentItem ? filterList.currentItem.bottom : undefined
-                        }
+                    elide: Text.ElideRight
+                    wrapMode: Text.NoWrap
+                    opacity: 1.0
 
-                        opacity: filterListScrollArea.focus ? 1.0 : 0.7
+                    level: 5
 
-                        width: (highlightItemSvg.margins.left
-                            + filterList.currentItem.textWidth
-                            + highlightItemSvg.margins.right
-                            + units.smallSpacing)
+                    text: model.display
+                }
+            }
 
-                        visible: filterList.currentItem
-                    }
+            highlight: PlasmaComponents.Highlight {
+                anchors {
+                    top: filterList.currentItem ? filterList.currentItem.top : undefined
+                    left: filterList.currentItem ? filterList.currentItem.left : undefined
+                    bottom: filterList.currentItem ? filterList.currentItem.bottom : undefined
+                }
 
-                    highlightFollowsCurrentItem: false
-                    highlightMoveDuration: 0
-                    highlightResizeDuration: 0
+                opacity: filterListScrollArea.focus ? 1.0 : 0.7
 
-                    onCurrentIndexChanged: applyFilter()
+                width: (highlightItemSvg.margins.left
+                    + filterList.currentItem.textWidth
+                    + highlightItemSvg.margins.right
+                    + units.smallSpacing)
 
-                    onCountChanged: {
-                        var width = 0;
+                visible: filterList.currentItem
+            }
 
-                        for (var i = 0; i < rootModel.count; ++i) {
-                            headingMetrics.text = rootModel.labelForRow(i);
+            highlightFollowsCurrentItem: false
+            highlightMoveDuration: 0
+            highlightResizeDuration: 0
 
-                            if (headingMetrics.width > width) {
-                                width = headingMetrics.width;
-                            }
-                        }
+            onCurrentIndexChanged: applyFilter()
 
-                        filterListScrollArea.desiredWidth = width + hItemMargins + units.gridUnit;
-                    }
+            onCountChanged: {
+                var width = 0;
 
-                    function applyFilter() {
-                        if (filterListScrollArea.visible && !searching && currentIndex >= 0) {
-                            pageList.model = rootModel.modelForRow(currentIndex);
-                            paginationBar.model = pageList.model;
-                        }
-                    }
+                for (var i = 0; i < rootModel.count; ++i) {
+                    headingMetrics.text = rootModel.labelForRow(i);
 
-                    Keys.onPressed: {
-                        if (event.key == Qt.Key_left) {
-                            event.accepted = true;
-
-                            var currentRow = Math.max(0, Math.ceil(currentItem.y / cellSize) - 1);
-
-                            if (pageList.currentItem) {
-                                pageList.currentItem.itemGrid.tryActivate(currentRow, 5);
-                            }
-                        } else if (event.key == Qt.Key_Tab) {
-                            event.accepted = true;
-                            searchField.focus = true;
-                        } else if (event.key == Qt.Key_Backtab) {
-                            event.accepted = true;
-                            systemFavoritesGrid.tryActivate(0, 0);
-                        }
+                    if (headingMetrics.width > width) {
+                        width = headingMetrics.width;
                     }
                 }
+
+                filterListScrollArea.desiredWidth = width + hItemMargins + units.gridUnit;
+            }
+
+            function applyFilter() {
+                if (filterListScrollArea.visible && !searching && currentIndex >= 0) {
+                    pageList.model = rootModel.modelForRow(currentIndex);
+                    paginationBar.model = pageList.model;
+                }
+            }
+
+            Keys.onPressed: {
+                if (event.key == Qt.Key_left) {
+                    event.accepted = true;
+
+                    var currentRow = Math.max(0, Math.ceil(currentItem.y / cellSize) - 1);
+
+                    if (pageList.currentItem) {
+                        pageList.currentItem.itemGrid.tryActivate(currentRow, 5);
+                    }
+                } else if (event.key == Qt.Key_Tab) {
+                    event.accepted = true;
+                    searchField.focus = true;
+                } else if (event.key == Qt.Key_Backtab) {
+                    event.accepted = true;
+                    systemFavoritesGrid.tryActivate(0, 0);
+                }
             }
         }
     }
